    input [3:0] A, B,  // 4-bit Inputs
    input [2:0] ALU_Sel, // 3-bit Control Signal
    output reg [3:0] ALU_Out // 4-bit Output
);

always @(*) begin
    case(ALU_Sel)
        3'b000: ALU_Out = A + B;  // Addition
        3'b001: ALU_Out = A - B;  // Subtraction
        3'b010: ALU_Out = A & B;  // Bitwise AND
        3'b011: ALU_Out = A | B;  // Bitwise OR
        3'b100: ALU_Out = ~A;     // Bitwise NOT (Unary operation)
        default: ALU_Out = 4'b0000; // Default case
    endcase
end

endmodule

Testbench code:

`timescale 1ns / 1ps

module ALU_tb;

reg [3:0] A, B; // 4-bit inputs
reg [2:0] ALU_Sel; // 3-bit control signal
wire [3:0] ALU_Out; // 4-bit output

// Instantiate the ALU module
ALU uut (
    .A(A),
    .B(B),
    .ALU_Sel(ALU_Sel),
    .ALU_Out(ALU_Out)
);

initial begin
    // Test ADD (3 + 2)
    A = 4'b0011; B = 4'b0010; ALU_Sel = 3'b000; #10;
    // Test SUB (5 - 1)
    A = 4'b0101; B = 4'b0001; ALU_Sel = 3'b001; #10;
    // Test AND (5 & 3)
    A = 4'b0101; B = 4'b0011; ALU_Sel = 3'b010; #10;
    // Test OR (5 | 3)
    A = 4'b0101; B = 4'b0011; ALU_Sel = 3'b011; #10;
    // Test NOT (~5)
    A = 4'b0101; B = 4'b0000; ALU_Sel = 3'b100; #10;

    $stop; // Stop simulation
end

endmodule
